import { useContext, useEffect, useState } from 'react'
import { useRouter } from 'next/router';
import Head from 'next/head'
import Link from 'next/Link'
import Note from '@/components/Note';
import Addnote from '@/components/Addnote';
import noteContext from '@/context/notes/noteContext'
import authContext from '@/context/auth/authContext';
import styles from '@/styles/Home.module.css'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function Home() {
  const context = useContext(noteContext);
  const { notes, fetchNotes, editNote } = context;

  const userContext = useContext(authContext);
  const { user, fetchUser } = userContext;

  const router = useRouter();
  useEffect(() => {
    if (localStorage.getItem("auth-token")) {
      async function fetchData() {
        const notesResponse = await fetchNotes();
        const userResponse = await fetchUser();
      }
      fetchData().then(()=>{
        toast.success('Logged in successfully !!', {
          position: "bottom-right",
          autoClose: 2500,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "dark",
        });
      });
    }
    else
      router.push("/login");
  }, [])

  const [toggle, setToggle] = useState(0);
  const [currentNote, setCurrentNote] = useState({ title: "", description: "", tag: "" })

  const updateNote = (note) => {
    setToggle(2);
    setCurrentNote(note);
  }

  const handleChange = (e) => {
    setCurrentNote({ ...currentNote, [e.target.name]: e.target.value })
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    editNote(currentNote._id, currentNote.title, currentNote.description, currentNote.tag).then((result) => {
      toast.success('Note updated successfully !', {
        position: "bottom-right",
        autoClose: 2500,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
    });
    setToggle(0);
  }

  return (
    <>
      <Head>
        <title>NoteKeeper | {user ? user : "Personal Cloud Diary !"}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="section container">
        <Link href='/tracker'><button className="button button_flex">Track your Expenses</button> </Link>
        <h2 className={styles.section_title}>Notes</h2>
        <div className={toggle === 1 ? `${styles.modal} ${styles.active_modal}` : `${styles.modal}`}>
          <div className={styles.modal_content}>
            <i onClick={() => { setToggle(0) }} className={`{fa-sharp fa-solid fa-xmark ${styles.modal_close}`}></i>
            <h2 className={styles.modal_title}>Add your note !!</h2>
            <Addnote setToggle={setToggle} />
          </div>
        </div>  
        <div className={`${styles.card_container}`}>
          <div className={styles.card}>
            <div className={styles.card_title}>Add title...</div>
            <div className={styles.card_description}>Add description...</div>
            <div className={styles.plus} onClick={() => { setToggle(1) }}>+</div>
          </div>
          {!notes.error && notes.map((note) => {
            /*
              TODO: Each child in a list should have a unique "key" prop.
              * While returning multiple div's elements wrap all under one unique key.
            */
            return <div key={note._id}>
              <Note note={note} updateNote={updateNote} />
              <div className={toggle === 2 ? `${styles.modal} ${styles.active_modal}` : `${styles.modal}`}>
                <div className={styles.modal_content}>
                  <i onClick={() => { setToggle(0) }} className={`{fa-sharp fa-solid fa-xmark ${styles.modal_close}`}></i>
                  <h2 className={styles.modal_title}>Update your note !!</h2>
                  <form onSubmit={handleSubmit} className={`${styles.contact_form}`}>
                    <div className={`${styles.contact_form_div}`}>
                      <label htmlFor="title" className={`${styles.contact_form_tag}`}>Title</label>
                      <input type="text" name="title" className={`${styles.contact_form_input}`} placeholder="Enter note title" required value={currentNote.title} onChange={handleChange} />
                    </div>
                    <div className={`${styles.contact_form_div} ${styles.contact_form_area}`}>
                      <label htmlFor="description" className={`${styles.contact_form_tag}`}>Description</label>
                      <textarea name="description" className={`${styles.contact_form_input}`} cols="30" rows="10" minLength={10} placeholder='Enter note description' required value={currentNote.description} onChange={handleChange}></textarea>
                    </div>
                    <div className={`${styles.contact_form_div}`}>
                      <label htmlFor="tag" className={`${styles.contact_form_tag}`}>Tag</label>
                      <input type="text" name="tag" className={`${styles.contact_form_input}`} placeholder="Enter Tag for the note" value={currentNote.tag} onChange={handleChange} />
                    </div>
                    <div className='button_wrapper'>
                      <button className={`button button_flex ${styles.button}`}>
                        Update Note
                      </button>
                      <ToastContainer position="bottom-right" autoClose={2500} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover theme="dark" />
                    </div>
                  </form>
                </div>
              </div>
            </div>
          })}
        </div>
      </div>
    </>
  )
}